;;; https://github.com/Open-Cascade-SAS/OCCT/blob/master/samples/qt/Tutorial/src/MakeBottle.cxx
(in-package :bottle)
(named-readtables:in-readtable :qt)

(defun make-wire (my-width my-thickness)
  (let ((a-wire nil) (make-wire nil))
    ;; Profile: Define Support Points
    (with-objects ((a-pnt1 (#_new gp_Pnt (/ (- my-width) 2) 0 0))
		   (a-pnt2 (#_new gp_Pnt (/ (- my-width) 2) (/ (- my-thickness) 4) 0))
		   (a-pnt3 (#_new gp_Pnt 0 (/ (- my-thickness) 2) 0))
		   (a-pnt4 (#_new gp_Pnt (/ my-width 2) (/ (- my-thickness) 4) 0))
		   (a-pnt5 (#_new gp_Pnt (/ my-width 2) 0 0))

		   ;; Profile: Define the Geometry
		   (a-arc-of-circle (#_new GC_MakeArcOfCircle a-pnt2 a-pnt3 a-pnt4))
		   (a-segment1 (#_new GC_MakeSegment a-pnt1 a-pnt2))
		   (a-segment2 (#_new GC_MakeSegment a-pnt4 a-pnt5))

		   ;; Profile: Define the Topology
		   (edge1 (#_new BRepBuilderAPI_MakeEdge (#_Value a-segment1)))
		   (edge2 (#_new BRepBuilderAPI_MakeEdge (#_Value a-arc-of-circle)))
		   (edge3 (#_new BRepBuilderAPI_MakeEdge (#_Value a-segment2))))
      (setf a-wire (#_Wire (#!_new BRepBuilderAPI_MakeWire (#_Edge edge1) (#_Edge edge2) (#_Edge edge3))))

      ;; Complete Profile
      (with-objects ((a-trsf (#_new gp_Trsf)))
	(#_SetMirror a-trsf (#_gp::OX)) ; x-axis = (#_gp::OX)
	(with-objects ((trans (#_new BRepBuilderAPI_Transform a-wire a-trsf)))
	(let ((a-mirrored-wire (#_TopoDS::Wire (#_Shape trans))))
	  (setf make-wire (#!_new BRepBuilderAPI_MakeWire))
	  (#_Add make-wire a-wire)
	  (#_Add make-wire a-mirrored-wire))
      make-wire)))))
	
(defun make-body (make-wire my-height my-thickness)
  (with-objects ((vec (#_new gp_Vec 0 0 my-height))
		 (make-face (#_new BRepBuilderAPI_MakeFace (#_Wire make-wire)))
		 (make-prism (#_new BRepPrimAPI_MakePrism (#_Face make-face) vec)))
    (let* ((my-body (#_Shape make-prism))
	   ;; Body : Apply Fillets
	   (mk-fillet  (#!_new BRepFilletAPI_MakeFillet my-body))
	   (radius (coerce (/ my-thickness 12) 'double-float)))
      (with-objects ((explorer (#_new TopExp_Explorer my-body +TopAbs_EDGE+)))
	(loop while (#_More explorer)
	      do (let ((an-edge (#_TopoDS::Edge (#_Current explorer))))
		   ;; Add edge to fillet algorithm
		   (#_Add mk-fillet radius an-edge)
		   (#_Next explorer)))
	(setq my-body (#_Shape mk-fillet))
	my-body))))

;; Body : Add the Neck	
(defun add-neck1 (my-body my-height my-thickness)
  (with-objects ((neck-location (#_new gp_Pnt 0 0 my-height))
		 (neck-ax2 (#_new gp_Ax2 neck-location (#_gp::DZ)))) ;neck-axis = (#_gp::DZ)
    (with-objects ((neck-ax3 (#_new gp_Ax3 neck-ax2)))
      (let ((my-neck-radius (coerce (/ my-thickness 4) 'double-float))
	    (my-neck-height (coerce (/ my-height 10) 'double-float)))
	(with-objects ((mk-cylinder (#_new BRepPrimAPI_MakeCylinder neck-ax2 my-neck-radius my-neck-height)))
	  (let* ((my-neck (#_Shape mk-cylinder))
		 (fuse (#!_new BRepAlgoAPI_Fuse my-body my-neck)))
	    (setq my-body (#_Shape fuse)))))))
  my-body)           

(defun add-neck	(my-body my-height my-neck-height my-neck-radius)
  (with-objects ((neck-location (#_new gp_Pnt 0 0 my-height)))
     (let ((neck-axis (#_gp::DZ)))
       (with-objects ((neck-ax2 (#_new gp_Ax2 neck-location neck-axis))
                      (neck-ax3 (#_new gp_Ax3 neck-ax2))
                      (mk-cylinder (#_new BRepPrimAPI_MakeCylinder neck-ax2 my-neck-radius my-neck-height)))
	 (let* ((my-neck (#_Shape mk-cylinder))
		(fuse (#!_new BRepAlgoAPI_Fuse my-body my-neck)))
	   (setq my-body (#_Shape fuse))))))
  my-body)

;; Body : Create a Hollowed Solid	            
(defun create-hollowed-solid (my-body my-thickness)
  (with-objects ((faces-to-remove (#_new Make_TopTools_ListOfShape))
                 (a-face-explorer (#_new TopExp_Explorer my-body +TopAbs_FACE+)))
    (let ((z-max -1.0d0)
	  (face-to-remove nil))
      (loop while (#_More a-face-explorer)
	    do (let ((face (#_TopoDS::Face (#_Current a-face-explorer))))
		 ;; Check if <aFace> is the top face of the bottleâ€™s neck
		 (let ((surface (#_handle::get_Standard_Transient (#_BRep_Tool::Surface face))))
		   ;; Use run-time type information (RTTI) for OCCT classes inheriting from Standard_Transient. 
		   (when (string= (#_Name (#_handle::get_Standard_Type (#_DynamicType surface))) "Geom_Plane")
		     (let ((a-pnt (#_Location (cast "Geom_Plane" surface))))
		       (when (> (#_Z a-pnt) z-max)
			 (setq z-max (#_Z a-pnt)
			       face-to-remove face))))))
	       (#_Next a-face-explorer))
      (#_Append faces-to-remove face-to-remove)
      (let ((thick-solid (#!_new BRepOffsetAPI_MakeThickSolid)))
	(#_MakeThickSolidByJoin thick-solid my-body (#_get faces-to-remove) (/ (- my-thickness) 50.0d0) 1.0d-3)
	(setq my-body (#_Shape thick-solid)))
  my-body)))

(defun add-thread-neck (my-height my-neck-height my-neck-radius)
  (let ((neck-axis (#_gp::DZ))
	(a-major (* 2 pi))
	(a-minor (/ my-neck-height 10.0d0)))
    (with-objects (;; Threading : Create Surfaces
		   (neck-location (#_new gp_Pnt 0 0 my-height))
		   (neck-ax2 (#_new gp_Ax2 neck-location neck-axis))
		   (neck-ax3 (#_new gp_Ax3 neck-ax2))
		   (a-cyl1 (#_new handle
				  (#_new Geom_CylindricalSurface neck-ax3 (* my-neck-radius 0.99d0))))
		   (a-cyl2 (#_new handle
				  (#_new Geom_CylindricalSurface neck-ax3 (* my-neck-radius 1.05d0))))
		   ;; Threading : Define 2D Curves
		   (a-pnt (#_new gp_Pnt2d (* 2 pi) (/ my-neck-height 2)))
		   (a-dir (#_new gp_Dir2d (* 2 pi) (/ my-neck-height 4)))
		   (an-ax2d (#_new gp_Ax2d a-pnt a-dir)))
      (let ((an-ellipse1 (#_new Geom2d_Ellipse an-ax2d a-major a-minor))
	    (an-ellipse2 (#_new Geom2d_Ellipse an-ax2d a-major (/ a-minor 4.0d0))))
	(with-objects ((h-an-ellipse1 (#_new handle an-ellipse1))
		       (h-an-ellipse2 (#_new handle an-ellipse2))
		       (an-arc1 (#_new handle
				       (#_new Geom2d_TrimmedCurve (#_get_handle h-an-ellipse1) 0.0d0 pi)))
		       (an-arc2 (#_new handle
				       (#_new Geom2d_TrimmedCurve (#_get_handle h-an-ellipse2) 0.0d0 pi))))
	  (let ((an-ellipse-pnt1 (#_Value an-ellipse1 0.0d0))
		(an-ellipse-pnt2 (#_Value an-ellipse1 pi)))
	    (with-objects ((a-segment (#_new GCE2d_MakeSegment an-ellipse-pnt1 an-ellipse-pnt2))
			   ;; Threading : Build Edges and Wires
			   (an-edge1-on-surf1 (#_new BRepBuilderAPI_MakeEdge (#_get_handle an-arc1) (#_get_handle a-cyl1)))
			   (an-edge2-on-surf1 (#_new BRepBuilderAPI_MakeEdge (#_Value a-segment) (#_get_handle a-cyl1)))
			   (an-edge1-on-surf2 (#_new BRepBuilderAPI_MakeEdge (#_get_handle an-arc2) (#_get_handle a-cyl2)))
			   (an-edge2-on-surf2 (#_new BRepBuilderAPI_MakeEdge (#_Value a-segment) (#_get_handle a-cyl2))))
	      (let ((threading-wire1 (#_Wire (#!_new BRepBuilderAPI_MakeWire (#_Edge an-edge1-on-surf1) (#_Edge an-edge2-on-surf1))))
		    (threading-wire2 (#_Wire (#!_new BRepBuilderAPI_MakeWire (#_Edge an-edge1-on-surf2) (#_Edge an-edge2-on-surf2)))))
		(#_BRepLib::BuildCurves3d threading-wire1)
		(#_BRepLib::BuildCurves3d threading-wire2)

		;; Create Threading
		(let ((a-tool (#!_new BRepOffsetAPI_ThruSections t nil 1.0e-06)))
		  (#_AddWire a-tool threading-wire1)
		  (#_AddWire a-tool threading-wire2)
		  (#_CheckCompatibility a-tool nil)
		  (#_Shape a-tool))))))))))
               	
(defun make-bottle (&optional (my-width 50) (my-height 70) (my-thickness 30))
  (start-releasable-objects 'make-bottle)
  (let* ((my-neck-radius (coerce (/ my-thickness 4) 'double-float))
	 (my-neck-height (coerce (/ my-height 10) 'double-float))
         (wire (make-wire my-width my-thickness))
         (body (make-body wire my-height my-thickness))
         (body+neck (add-neck body my-height my-neck-height my-neck-radius))
         (my-body (create-hollowed-solid body+neck my-thickness))
         (my-threading (add-thread-neck my-height my-neck-height my-neck-radius))
         (a-res (#!_new TopoDS_Compound)))
    (with-objects ((a-builder (#_new BRep_Builder)))
      (#_MakeCompound a-builder a-res)
      (#_Add a-builder a-res my-body)
      (#_Add a-builder a-res my-threading)
      (end-releasable-objects)
      a-res)))
